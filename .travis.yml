language: c

env:
  global:
    - secure: "IQxHT3BNaaNeKhqx08zsVW2we5oh3bjlKIVsIaYkN5CSM4ErVEFV5lncXloHXN5RtNxpZ0I3Mo11MuwF5LH+/4K9j37a4pQgU6R66Ok7OyanWYcPPfQLwXfQIO1/SD/NKgSGp6ob1C2wxLno040BHUOEf92wrNUxBJe6wwGBE6kuo5IuE+73lySI2rwacEu5Op0B2X1/SgpDF9Y5e31kZw6jh65jDh/slMJnzl5/R7X/VC7eDY9JfM18/4JMnuVY0Larzo5Zu5bCABXBhywMaEaUCFWnWP4PYu4ato697zBGOToppR2EH15lu8pD3HxPp0IR3SfsPjIdKt+nXkWFvJdZMS533GK1FZV6AaZxNFV+7nly6jnGndDdA9/y8oNs6tc0AKaKbAp378n1bNMY26cUfs+lZmzv24PYuob8q/kO6X2r1BTavZ5ScRGrKibtwZ/WLpVOuo/2hZxDdHc2UatlgTXL3f38ptD5HdPiLfMKfXmVaJVP2PMYudfwCoDXkbtNrQYWL86FwjC0BA7/kjZivNeMrt4uWP8RLpjTvXRtjUgqQRWZaok99eamQ0z9Yf+ehoSTTO3Aevv0qyD19Dopd/qEJnt+K/zBhQFbX61/MA46rE9orn2HJMOlabTaQTmZxE9cdobWwwbZWaTIhvfgQJHeOmZF6zdtuASvJ+M="
    - secure: "UNweCnb3OYt0KsLkACJeqMvUkD7Afb0+bgW6GnZT27R9OgYruMvthRWUTZ3m8AkXlME5+LYbTatXUyDCxpysyoZfLzZLekgw9mU1GUsXAWRqK2QSOcMzpfg6aNYnhEJdTz8+5ansByaapuzvvYuwMDKF92Sbwar5j1y3HvwSIyZAKI+hIC5wwH5EVGiseomAHuNGZ7SXBfHKH03LxnePAjssGxLkC5eMm2W0PbLBT2EghWGEKqEUrNCSEPCxsxMFiOxHXVfL4OrgdQLNHmCOnQrWIXlx+Bm5PqEFQx5O/G9l7OqzudOyjRB1k+geuJ4mzmxzA1dAFWe2jtVQnmEHnX7Q2BhY0RngMsohkQtkvclPG4Nl2JvBpEo9bg+E6fnkG87PMklz40eKktdKwm0xXf+twYDEUs/S7bbzgOXr4bvk/yMqjn0VJN34s/wVZpVkr/osf0S6+OZKx0SixLWw1t39nqK68RXxgk4GYyCcV9EKa1DqYIABX3QSADWKWuq+bOg3kOhhUZaAZateiaKCKTEMVxpE+RO+O9FlH79I4v4g85JYFtopAz9FfWBLhh14bLPrY5aAmyi/jP7ccED0p7c3ela+6NgTUJSNRXBj90BbJUsoUAMjsxTRap9Tq3V51ooxE9VErOSiQX8HzHicGhRB0t7rqXVgOw+beJCn4rE="

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env:
      - OPENSSL="1.0.2"
      - TESTS=true
      - FIPS=FALSE
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env:
      - OPENSSL="1.1.0"
      - TESTS=true
      - FIPS=FALSE
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env:
      - OPENSSL="BUILD"
      - TESTS=true
      - FIPS=FALSE
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
      env:
      - OPENSSL="BUILD"
      - FIPS=TRUE
      - TESTS=TRUE
    - os: osx
      osx_image: xcode9.4
      env:
      - TESTS=true
      - FIPS=FALSE
    - os: osx
      osx_image: xcode9.4
      env:
      - TESTS=true
      - FIPS=TRUE
    - os: osx
      osx_image: xcode9.4
      env:
      - IOS=true
      - FIPS=false
    - os: osx
      osx_image: xcode9.4
      env:
      - IOS=true
      - FIPS=true
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=FALSE
      - ANDROID="armeabi-v7a"
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=FALSE
      - ANDROID="armeabi"
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=FALSE
      - ANDROID="x86"
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=TRUE
      - ANDROID="armeabi-v7a"
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=TRUE
      - ANDROID="armeabi"
    - os: linux 
      dist: trusty
      sudo: required
      env:
      - FIPS=TRUE
      - ANDROID="x86"
    - os: linux
      dist: trusty
      sudo: required
      node_js:
        - "node"
        - "lts/*" 
      env:
      - NODE=true
    - os: osx
      sudo: required
      node_js:
        - "node"
        - "lts/*" 
      osx_image: xcode9.4
      env:
      - NODE=true
    - os: linux
      sudo: required
      jdk: oraclejdk8
      env:
      - JAVA=true
      - TESTS=true
    - os: osx
      sudo: required
      jdk: oraclejdk8
      osx_image: xcode9.4
      env:
      - JAVA=true
      - TESTS=true
  exclude:
    - compiler: clang

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$OPENSSL" == "1.0.2" ]]; then sudo add-apt-repository ppa:0k53d-karl-f830m/openssl -y; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update -qq; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$OPENSSL" == "1.0.2" ]]; then sudo apt-get install openssl -y; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$OPENSSL" == "1.1.0" ]]; then git clone https://github.com/openssl/openssl.git; cd openssl; git checkout tags/OpenSSL_1_1_0e; ./config shared no-threads; make; sudo make install; sudo rm /usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libcrypto.a; cd ..; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$OPENSSL" == "BUILD" ]]; then export LOCAL_OPTIONS="-DBUILD_OPENSSL=true"; fi
  - if [[ ! -z "${ANDROID}" ]]; then wget -O $HOME/ndk.zip https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip; unzip $HOME/ndk.zip -d $HOME/ndk >/dev/null; fi
  - if [[ "${NODE}" == "true" || "${JAVA}" == "true" ]]; then git clone https://github.com/meetnow/swig.git; cd swig; git checkout -t origin/js-v8-52; ./autogen.sh; ./configure; make && sudo make install; cd ../; fi

script:
 - mkdir build;
 - cd build;
 - |
   if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
       if [[ ! -z "${ANDROID}" ]]; then
            cmake -DCMAKE_TOOLCHAIN_FILE=../Toolchain-Android.cmake -DFIPS=${FIPS} -DCMAKE_BUILD_TYPE=Release -DBUILD_OPENSSL=true -DCMAKE_ANDROID_NDK=$HOME/ndk/android-ndk-r14b -DCMAKE_ANDROID_ARCH_ABI=${ANDROID} ../
       elif [[ ! -z "${NODE}" ]]; then
            cd ..
            npm install --build-from-source
            npm test
            export PATH=`pwd`/node_modules/.bin/:$PATH
            if [ ! -z "$TRAVIS_TAG" ]; then node-pre-gyp --target_platform='ubuntu_trusty' package publish; fi
       elif [[ ! -z "${JAVA}" ]]; then
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=true -DBUILD_TESTS=true -DBUILD_JAVA=true ../
       else
            cmake ${LOCAL_OPTIONS} -DCMAKE_BUILD_TYPE=Release -DFIPS=${FIPS} -DBUILD_TESTS=true ../
       fi
   fi 
 - |
   if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
       if [[ ! -z "${IOS}" ]]; then 
           cmake -DCMAKE_TOOLCHAIN_FILE=../Toolchain-iOS.cmake -DFIPS=${FIPS} -DBUILD_OPENSSL=true -DCMAKE_BUILD_TYPE=Release ../
       elif [[ ! -z "${NODE}" ]]; then
           cd ..
           npm install --build-from-source
           npm test
           export PATH=`pwd`/node_modules/.bin/:$PATH
           if [ ! -z "$TRAVIS_TAG" ]; then node-pre-gyp package publish; fi
       elif [[ ! -z "${JAVA}" ]]; then
           cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=true -DBUILD_TESTS=true -DBUILD_OPENSSL=true -DBUILD_JAVA=true ../
       else
           cmake -DBUILD_OPENSSL=true -DCMAKE_BUILD_TYPE=Release -DFIPS=${FIPS} -DBUILD_TESTS=true ../
       fi
   fi
 - if [[ -z ${NODE} ]]; then make; fi
 - if [[ ! -z ${TESTS} ]]; then env CTEST_OUTPUT_ON_FAILURE=1 make test; fi
